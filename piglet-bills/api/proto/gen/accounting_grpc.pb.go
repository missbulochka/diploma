// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: piglet-bills/api/proto/accounting.proto

package billsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PigletBillsClient is the client API for PigletBills service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PigletBillsClient interface {
	CreateBill(ctx context.Context, in *CreateBillRequest, opts ...grpc.CallOption) (*BillResponse, error)
	GetSomeBills(ctx context.Context, in *GetSomeBillsRequest, opts ...grpc.CallOption) (*GetSomeBillsResponse, error)
	GetBill(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponse, error)
	UpdateBill(ctx context.Context, in *UpdateBillRequest, opts ...grpc.CallOption) (*BillResponse, error)
	DeleteBill(ctx context.Context, in *DeleteBillRequest, opts ...grpc.CallOption) (*DeleteBillResponse, error)
}

type pigletBillsClient struct {
	cc grpc.ClientConnInterface
}

func NewPigletBillsClient(cc grpc.ClientConnInterface) PigletBillsClient {
	return &pigletBillsClient{cc}
}

func (c *pigletBillsClient) CreateBill(ctx context.Context, in *CreateBillRequest, opts ...grpc.CallOption) (*BillResponse, error) {
	out := new(BillResponse)
	err := c.cc.Invoke(ctx, "/accounting.pigletBills/createBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pigletBillsClient) GetSomeBills(ctx context.Context, in *GetSomeBillsRequest, opts ...grpc.CallOption) (*GetSomeBillsResponse, error) {
	out := new(GetSomeBillsResponse)
	err := c.cc.Invoke(ctx, "/accounting.pigletBills/getSomeBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pigletBillsClient) GetBill(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponse, error) {
	out := new(BillResponse)
	err := c.cc.Invoke(ctx, "/accounting.pigletBills/getBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pigletBillsClient) UpdateBill(ctx context.Context, in *UpdateBillRequest, opts ...grpc.CallOption) (*BillResponse, error) {
	out := new(BillResponse)
	err := c.cc.Invoke(ctx, "/accounting.pigletBills/updateBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pigletBillsClient) DeleteBill(ctx context.Context, in *DeleteBillRequest, opts ...grpc.CallOption) (*DeleteBillResponse, error) {
	out := new(DeleteBillResponse)
	err := c.cc.Invoke(ctx, "/accounting.pigletBills/deleteBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PigletBillsServer is the server API for PigletBills service.
// All implementations must embed UnimplementedPigletBillsServer
// for forward compatibility
type PigletBillsServer interface {
	CreateBill(context.Context, *CreateBillRequest) (*BillResponse, error)
	GetSomeBills(context.Context, *GetSomeBillsRequest) (*GetSomeBillsResponse, error)
	GetBill(context.Context, *GetBillRequest) (*BillResponse, error)
	UpdateBill(context.Context, *UpdateBillRequest) (*BillResponse, error)
	DeleteBill(context.Context, *DeleteBillRequest) (*DeleteBillResponse, error)
	mustEmbedUnimplementedPigletBillsServer()
}

// UnimplementedPigletBillsServer must be embedded to have forward compatible implementations.
type UnimplementedPigletBillsServer struct {
}

func (UnimplementedPigletBillsServer) CreateBill(context.Context, *CreateBillRequest) (*BillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBill not implemented")
}
func (UnimplementedPigletBillsServer) GetSomeBills(context.Context, *GetSomeBillsRequest) (*GetSomeBillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSomeBills not implemented")
}
func (UnimplementedPigletBillsServer) GetBill(context.Context, *GetBillRequest) (*BillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBill not implemented")
}
func (UnimplementedPigletBillsServer) UpdateBill(context.Context, *UpdateBillRequest) (*BillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBill not implemented")
}
func (UnimplementedPigletBillsServer) DeleteBill(context.Context, *DeleteBillRequest) (*DeleteBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBill not implemented")
}
func (UnimplementedPigletBillsServer) mustEmbedUnimplementedPigletBillsServer() {}

// UnsafePigletBillsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PigletBillsServer will
// result in compilation errors.
type UnsafePigletBillsServer interface {
	mustEmbedUnimplementedPigletBillsServer()
}

func RegisterPigletBillsServer(s grpc.ServiceRegistrar, srv PigletBillsServer) {
	s.RegisterService(&PigletBills_ServiceDesc, srv)
}

func _PigletBills_CreateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PigletBillsServer).CreateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.pigletBills/createBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PigletBillsServer).CreateBill(ctx, req.(*CreateBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PigletBills_GetSomeBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSomeBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PigletBillsServer).GetSomeBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.pigletBills/getSomeBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PigletBillsServer).GetSomeBills(ctx, req.(*GetSomeBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PigletBills_GetBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PigletBillsServer).GetBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.pigletBills/getBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PigletBillsServer).GetBill(ctx, req.(*GetBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PigletBills_UpdateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PigletBillsServer).UpdateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.pigletBills/updateBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PigletBillsServer).UpdateBill(ctx, req.(*UpdateBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PigletBills_DeleteBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PigletBillsServer).DeleteBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.pigletBills/deleteBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PigletBillsServer).DeleteBill(ctx, req.(*DeleteBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PigletBills_ServiceDesc is the grpc.ServiceDesc for PigletBills service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PigletBills_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.pigletBills",
	HandlerType: (*PigletBillsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createBill",
			Handler:    _PigletBills_CreateBill_Handler,
		},
		{
			MethodName: "getSomeBills",
			Handler:    _PigletBills_GetSomeBills_Handler,
		},
		{
			MethodName: "getBill",
			Handler:    _PigletBills_GetBill_Handler,
		},
		{
			MethodName: "updateBill",
			Handler:    _PigletBills_UpdateBill_Handler,
		},
		{
			MethodName: "deleteBill",
			Handler:    _PigletBills_DeleteBill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "piglet-bills/api/proto/accounting.proto",
}
